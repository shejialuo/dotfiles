""" Basic Configuration

" To set the encode format
set fileencoding=utf-8
set termencoding=utf-8
set encoding=utf-8

" To set the tab
set tabstop=8
set shiftwidth=4
set softtabstop=4

" To set the tab to space
set expandtab

" To set the indent same
" set autoindent

" To apply the vim's operation
set nocompatible

" To display the line number
set number

" To display the current line boldly
set cursorline

" To show normal mode's commands
set showcmd

" To set the quick search
set incsearch

" To display the airline
set laststatus=2

" To display the tabline
set showtabline=2

" To hide the default mode text
set noshowmode

" To set no backup
set nobackup
set nowritebackup

" To set the tab and space display
set listchars=tab:>-,trail:-
set list

set ttimeoutlen=50

set cmdheight=2

set updatetime=300

set signcolumn=yes

set foldmethod=manual

" disable mouse
set mouse=

filetype plugin on
syntax on

" Reload unchanged files automatically
set autoread
set shortmess+=A

" Avoids swapfiles in current directory
if &directory =~# '^\.,'
  if !empty($HOME)
    if has('win32')
      let &directory = expand('$HOME/vimfiles') . '//,' . &directory
    else
      let &directory = expand('$HOME/.vim') . '//,' . &directory
    endif
  endif
  if !empty($XDG_DATA_HOME)
    let &directory = expand('$XDG_DATA_HOME') . '//,' . &directory
  endif
  if has('macunix')
    let &directory = expand('$HOME/Library/Autosave Information') . '//,' . &directory
  endif
endif

" To change the leader to space.
let g:mapleader = "\<Space>"

" To change the local leader to ,
let g:maplocalleader = ","

noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

""" End

""" sheerun/vim-polyglot

" We need to set it before loading the plugin
let g:polyglot_disabled = ["sensible"]

""" End

""" Plugin Manager

call plug#begin()

Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-airline/vim-airline'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/nerdcommenter'
Plug 'airblade/vim-gitgutter'
Plug 'wakatime/vim-wakatime'
Plug 'liuchengxu/vim-which-key'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'editorconfig/editorconfig-vim'

call plug#end()

""" End

""" drcualr/vim

colorscheme dracula

""" End

""" airblade/vim-gitgutter

nmap hj <Plug>(GitGutterNextHunk)
nmap hk <Plug>(GitGutterPrevHunk)
nmap hs <Plug>(GitGutterStageHunk)
nmap hu <Plug>(GitGutterUndoHunk)

""" End

""" preservim/nerdcommenter

let g:NERDSpaceDelims = 1

""" End

""" liuchengxu/vim-which-key

let g:which_key_map = {}
let g:which_key_map.1 = 'which_key_ignore'
let g:which_key_map.2 = 'which_key_ignore'
let g:which_key_map.3 = 'which_key_ignore'
let g:which_key_map.4 = 'which_key_ignore'
let g:which_key_map.5 = 'which_key_ignore'
let g:which_key_map.6 = 'which_key_ignore'
let g:which_key_map.7 = 'which_key_ignore'
let g:which_key_map.8 = 'which_key_ignore'
let g:which_key_map.9 = 'which_key_ignore'
let g:which_key_map.0 = 'which_key_ignore'
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
call which_key#register('<Space>', "g:which_key_map")

let g:which_key_map_h = {}
nnoremap <silent> h :<c-u>WhichKey 'h'<CR>
call which_key#register('h', "g:which_key_map_h")

""" End

""" neoclide/coc.nvim

inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

nmap <silent><nowait> gd <Plug>(coc-definition)
nmap <silent><nowait> gy <Plug>(coc-type-definition)
nmap <silent><nowait> gi <Plug>(coc-implementation)
nmap <silent><nowait> gr <Plug>(coc-references)
nmap <silent> <F2> <Plug>(coc-refactor)

autocmd CursorHold * silent call CocActionAsync('highlight')

xmap <leader>a  <Plug>(coc-codeaction-selected)
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>ac <Plug>(coc-codeaction)

if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

nnoremap <C-c> <Plug>(coc-cursors-position)

nmap <expr> <silent> <C-d> <SID>select_current_word()
function! s:select_current_word()
  if !get(b:, 'coc_cursors_activated', 0)
    return "\<Plug>(coc-cursors-word)"
  endif
  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
endfunc

let g:coc_snippet_next = '<tab>'

nnoremap <Leader>r :CocCommand explorer<CR>

nnoremap <silent> <Leader>eyc : CocCommand yank.clean<CR>

nnoremap <silent> <Leader>ls : CocList symbols<CR>
nnoremap <silent> <Leader>le : CocList extensions<CR>
nnoremap <silent> <Leader>ld : CocList diagnostics<CR>
nnoremap <silent> <Leader>lc : CocList changes<CR>
nnoremap <silent> <Leader>lo : CocList outline<CR>
nnoremap <silent> <Leader>lm : CocList marks<CR>
nnoremap <silent> <Leader>lf : CocList files<CR>
nnoremap <silent> <Leader>lb : CocList buffers<CR>

""" End
